cppTypes = (
    "int",
    "float",
    "double",
    "char",
    "bool",
    "long",
    "void",
    "const",     #helps us in func return value
    "unsigned",
    "...",
)

def isCppType(token): return token in cppTypes

def lexLine(line):
    tokens = []
    i = 0
    length = len(line)
    while i != length:
        if line[i].isalpha():
            token = ""
            while(line[i].isalnum()):
                token += line[i]
                i += 1
            tokens.append(token)
        elif line[i] == ' ': i += 1
        elif line[i] == '/' and line[i+1] == '/': return tokens
        elif line[i] == '.' and line[i+1] == '.' and line[i+2] == '.':
            tokens.append("...")
            tokens.append("HACK")
            i += 3
        else:
            tokens.append(line[i])
            i += 1
    return tokens
        
def parseFuncDef(line):
    tokens = lexLine(line)[1:] #ignore RLAPI
    line = ""
    x = 0
    #No one returns const data_type, so we skip it
    while isCppType(tokens[x]): x += 1
    if x == 0:
        line = "ray::" + tokens[0] + " "
        x += 1
    else:
        for i in range(x): line += tokens[i] + " "
    while not tokens[x].isalnum():
        line += tokens[x]
        x += 1
    funcName = tokens[x]
    line += "(*" + tokens[x] + ")("
    x += 2
    while True:
        if tokens[x] == ')' or tokens[x] == ';':
            line = line[:-2]
            line += ');'
            return line, funcName
        if tokens[x] == "const":
            line += "const "
            x += 1
        if isCppType(tokens[x]):
            while isCppType(tokens[x]):
                line += tokens[x] + " "
                x += 1
        else:
            line += "ray::" + tokens[x]
            x += 1
        while not tokens[x].isalnum():
            line += tokens[x]
            x += 1
            if tokens[x] == ')' or tokens[x] == ';':
                line = line[:-2]
                line += ');'
                return line, funcName
        line += ", "
        x += 2
    return None, None

gameProcDef   = open("src/Game/procDef.cc", 'w')
gameProcBind  = open("src/Game/procBind.cc", 'w')
engineProcArr = open("src/procArr.cc", 'w')

header = "//This file was generated by raylibProcs.py\n\n"
gameProcDef.write(header)
gameProcBind.write(header)
engineProcArr.write(header)

file = "vendor/raylib/src/raylib.h"
f = open(file)
for line in f:
    if not line.startswith("RLAPI"): continue
    line, funcName = parseFuncDef(line)
    gameProcDef.write(line + "\n")
    gameProcBind.write("BIND_PROC("+funcName+");\n")
    engineProcArr.write("V(ray::"+funcName+"),\n")